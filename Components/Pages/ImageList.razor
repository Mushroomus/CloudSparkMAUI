@namespace CloudSparkMAUI.Components

@using CloudSparkMAUI.Models
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Core
@using Newtonsoft.Json.Linq
@inject CloudSparkMAUI.Services.FirebaseFunctionService FirebaseFunctionService
@inject CloudSparkMAUI.Services.FirebaseDatabaseService FirebaseDatabaseService
@inject CloudSparkMAUI.Services.FirebaseStorageService FirebaseStorageService
@inject IJSRuntime JSRuntime


<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
</head>

<nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm mb-4">
    <div class="container">
        <a class="navbar-brand" href="#">
            <i class="bi bi-cloud"></i> CloudSpark
        </a>
    </div>
</nav>

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6">
            <div class="d-flex align-items-center justify-content-between mb-4">
                <h3 class="text-primary">Image List</h3>

                <button class="btn btn-outline-primary" @onclick="RefreshList">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>

                @if (DeviceInfo.Current.Platform == DevicePlatform.Android || DeviceInfo.Current.Platform == DevicePlatform.iOS)
                {
                    <button class="btn btn-primary" @onclick="OpenCamera">
                        <i class="bi bi-camera"></i> Upload Image
                    </button>
                }
            </div>

            <img id="image" />

            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Filter images..."
                       value="@FilterText" @oninput="OnFilterChanged">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
            </div><br />

            @if (FilteredItems == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!FilteredItems.Any())
            {
                <p>No Images Available</p>
            }
            else
            {
                <div class="list-group" style="max-height: 400px; overflow-y: auto;">
                    @foreach (var item in FilteredItems)
                    {
                        <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center mb-2 shadow-sm rounded-3"
                           style="border-top: 2px solid #007bff;" @onclick="() => OnItemClicked(item)">
                            <div class="d-flex align-items-center me-4">
                                <!-- Display the Icon Image -->
                                @if (DeviceInfo.Current.Platform == DevicePlatform.WinUI && !string.IsNullOrEmpty(item.IconUrl))
                                {
                                    <img src="@item.IconUrl" alt="@item.Icon" class="me-2" style="width: 30px; height: 30px; object-fit: cover;">
                                }
                                else
                                {
                                    <i class="bi bi-image me-2" style="font-size: 30px;"></i>
                                }
                                <span>@item.Name</span>
                            </div>

                            @if (item.Metadata != null && item.Metadata.Any())
                            {
                                <div class="me-2">
                                    @{
                                        var fetchedMetadata = item.Metadata["metadata"] as Dictionary<string, object>;

                                        // Iterate over the top-level metadata
                                        foreach (var metadataItem in fetchedMetadata)
                                        {
                                            <div class="mb-2">
                                                <strong>
                                                    @string.Join(" ", metadataItem.Key
                                                         .Split('_')
                                                         .Select(word => char.ToUpper(word[0]) + word.Substring(1).ToLower()))
                                                </strong>
                                                <br />
                                                <span>
                                                    @* Check if the value is a nested dictionary *@
                                                    @if (metadataItem.Value is JObject nestedObject)
                                                    {
                                                        // Nested dictionary, display it recursively
                                                        var nestedMetadata = nestedObject.ToObject<Dictionary<string, object>>();
                                                        <div class="ml-3">
                                                            @foreach (var nestedItem in nestedMetadata)
                                                            {
                                                                <div style="margin-left: 20px;">
                                                                    <strong>
                                                                        @string.Join(" ", nestedItem.Key
                                                                             .Split('_')
                                                                             .Select(word => char.ToUpper(word[0]) + word.Substring(1).ToLower()))
                                                                    </strong>
                                                                    <span>@nestedItem.Value</span>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        // Direct value (not a nested dictionary)
                                                        @metadataItem.Value
                                                    }
                                                </span>
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        </a>

                       @*  <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center mb-2 shadow-sm rounded-3"
                           style="border-top: 2px solid #007bff;" @onclick="() => OnItemClicked(item)">
                            <span>@item.Name</span>
                            <i class="bi bi-image"></i>
                        </a> *@
                    }
                </div>
            }
        </div>

        <div class="col-md-6">
            <h3 class="text-primary mb-4">Image Viewer</h3>

            @if (ImageUrl == null)
            {
                <p>Select an image to view</p>
            }
            else
            {
                <div class="card shadow-sm">
                    <img src="@ImageUrl" class="card-img-top" alt="Item Image" />
                    @if (DeviceInfo.Current.Platform == DevicePlatform.WinUI || DeviceInfo.Current.Platform == DevicePlatform.macOS)
                    {
                        <button class="btn btn-primary mt-3" @onclick="DownloadImage">Download Image</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string> Icons = new Dictionary<string, string>();

    private List<Image>? Items;
    private List<Image>? FilteredItems;
    private string? ImageUrl;
    private string? FilterText;
    private Image? SelectedImage;

    protected override async Task OnInitializedAsync()
    {
        FilterText = string.Empty;
        await LoadIconsAsync();
        await LoadItemsAsync();
        ApplyFilter();
    }

    private async Task LoadIconsAsync()
    {
        Icons = await FirebaseDatabaseService.GetIconsAsync();
    }

    private async Task LoadItemsAsync()
    {
        List<JObject> objects = await FirebaseDatabaseService.GetItemsAsync();
        Items = new List<Image>();

        foreach (var obj in objects)
        {
            var metadata = obj.Properties()
            .Where(p => p.Name == "metadata")
            .ToDictionary(
                p => p.Name,
                p => p.Value.Type == JTokenType.Object
                    ? p.Value.ToObject<Dictionary<string, object>>()  // Keep the nested object as is
                    : (object)p.Value?.ToString() ?? string.Empty
            );

            string? icon = obj["icon"]?.ToString();

            Items.Add(new Image
            {
                Name = obj["image_name"]?.ToString(),
                Icon = icon,
                IconUrl = icon != null ? Icons[icon] : null,
                Metadata = metadata
            });
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(FilterText))
            FilteredItems = Items;
        else
        {
            FilteredItems = Items?
                .Where(item => item.Name.Contains(FilterText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task RefreshList()
    {
        await OnInitializedAsync();
    }

    private async Task OnItemClicked(Image item)
    {
        @if (DeviceInfo.Current.Platform == DevicePlatform.Android || DeviceInfo.Current.Platform == DevicePlatform.iOS)
        {
            var mainDisplayInfo = DeviceDisplay.Current.MainDisplayInfo;

            var imageBytes = await FirebaseFunctionService.GetImageFunctionAsync("images/" + item.Name, mainDisplayInfo.Width.ToString(), mainDisplayInfo.Height.ToString());
            ImageUrl = "data:image/png;base64," + Convert.ToBase64String(imageBytes);
        }
        else
        {
            ImageUrl = await FirebaseStorageService.GetImageUrlAsync(item.Name);
            SelectedImage = item;
        }
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        FilterText = e.Value?.ToString();
        ApplyFilter();
    }

    public async Task DownloadImage()
    {
        if (string.IsNullOrEmpty(ImageUrl))
            return;

        try
        {
            var localPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures), SelectedImage?.Name + ".png");

            using (var client = new HttpClient())
            {
                var imageBytes = await client.GetByteArrayAsync(ImageUrl);

                await File.WriteAllBytesAsync(localPath, imageBytes);

                // Display a Snackbar notification for success
                var snackBar = Toast.Make("Image downloaded successfully!", ToastDuration.Short);
                await snackBar.Show();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading the image: {ex.Message}");
        }
    }

    private async Task OpenCamera()
    {
        // Request camera permission
        var permissionStatus = await Permissions.RequestAsync<Permissions.Camera>();
        if (permissionStatus != PermissionStatus.Granted)
        {
            // Handle permission denial
            return;
        }

        // Capture the photo
        FileResult photo = null;
        if (DeviceInfo.Current.Platform == DevicePlatform.Android || DeviceInfo.Current.Platform == DevicePlatform.iOS)
        {
            try
            {
                photo = await MediaPicker.CapturePhotoAsync();
            }
            catch (Exception ex)
            {
                // Handle any error that might occur during photo capture
                Console.WriteLine($"Error capturing photo: {ex.Message}");
            }
        }

        if (photo != null)
        {
            using (var photoStream = await photo.OpenReadAsync())
            {
                string imageName = $"{Guid.NewGuid()}.png";

                await FirebaseDatabaseService.AddItemAsync(imageName);
                await FirebaseStorageService.UploadImageAsync(photoStream, imageName);
                await RefreshList();
            }
        }
    }
}
